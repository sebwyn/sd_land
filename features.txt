Philosophy: everything is buffer
    - terminals
    - find menus

Writing automations, becomes reading these buffers, and doing shit with that info
    - these potentially enables writing AI that has free access to this information


**Movements
  - End of line
  - Beginning of line
  - column aware movements

 **Selection
  - selection mode -> cursor mode: good support
    . right arrow, will put the cursor at the end of selection
    . opposite for left arrow

  - double clicking selects words

**Copy and Paste

**Plugins
    - tab: tab and shift tab from a selection
    - snippet

**Find
    - aesthetically, move the whole buffer viewport down, and center the find menu
    - highlight a box around the find where the color indicates how your searching
    - see how it feels
    
    - maybe these colors somewhat align with syntax highlighting
    - find in file 
    - find in project
    - symbol search
    - complex queries

**Multicursor
    - select next
    - deselect last selection
    - insert cursor below and above

**Language support
    - show errors
    - autocomplete
    - outline view
    - go to definition
    - go to references
    - movements based on code (AST type beat)

**Make it capable
    - writing scripts that run on buffers, not sure what that means yet

    - pull in documentation from the web, with web scrapers
    - can I chat with chatGPT
    - ....
    - What does autoGPT visualization look like, can I view attention

**Make it pretty
    - background blur??
    - mutable rust variables, have a shader, wobbly affect?
    - animation, 100%, animated selection, animated cursor
    - highlighting the text in a radius under cursor

    - make the ai dream on the text in the file, to create a background
    - what if each file has it's own personality, different theme, different background
    - what if that imagery is dreampt by stable diffusion

**Other features/directions
    - Integrate message sequence diagram grapher, edit code directly from a MSD
    - hot reloading of code, this becomes the editor on top of the game?
    - hot reloading shaders
    - a really good api

    - an editor that lets you write code for it within it, think emacs?

Rendering other formats? Markdown?
 

**Optimization
  - Notes: starting performance: ~25% sd_land cpu usage, ~35% window server cpu